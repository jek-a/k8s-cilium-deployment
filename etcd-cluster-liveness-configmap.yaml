apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kube-system
  name: etcd-liveness-check
  labels:
    name: etcd-liveness-check
data:
  etcd-liveness-check.sh: |-
    #!/usr/bin/env sh

    getDeadCiliumEtcd() {
      NUM_DEAD_CILIUM_ETC=$(kubectl get po -n kube-system --selector=etcd_cluster=cilium-etcd 2>error| grep 'Completed' | wc -l)
      echo $NUM_DEAD_CILIUM_ETC
    }

    # Check if resource not found
    # if 'error' file is not an empty than we have an error
    ciliumEtcdError() {
      if test -s error; then
        return 0
      else
        return 1
      fi
    }

    echo 'The etcd cluster health check start. Interval 30 sec'
    sleep 30
    while true; do
      getDeadCiliumEtcd &>/dev/null
      if ciliumEtcdError; then
        echo 'EtcdCluster resource not found. The EtcdCluster resource has been deleted'
        echo 'Creating Etcd cluster'
        kubectl create -f /scripts/cilium-etcd-cluster.yaml
      fi
      if [[ $(getDeadCiliumEtcd) -gt 0 ]]; then
        echo 'The Etcd cluster dead'
        echo 'Re-creating Etcd cluster'
        kubectl delete -f /scripts/cilium-etcd-client-svc.yaml
        kubectl delete -f /scripts/cilium-etcd-svc.yaml
        kubectl delete -f /scripts/cilium-etcd-cluster.yaml
        kubectl create -f /scripts/cilium-etcd-client-svc.yaml
        kubectl create -f /scripts/cilium-etcd-svc.yaml
        kubectl create -f /scripts/cilium-etcd-cluster.yaml
      fi
      sleep 30
    done
  cilium-etcd-cluster.yaml: |-
    apiVersion: "etcd.database.coreos.com/v1beta2"
    kind: "EtcdCluster"
    metadata:
      name: "cilium-etcd"
      namespace: kube-system
    spec:
      size: 3
      version: "3.2.22"
      TLS:
        static:
          member:
            peerSecret: cilium-etcd-peer-tls
            serverSecret: cilium-etcd-server-tls
          operatorSecret: cilium-etcd-client-tls
      pod:
        labels:
          "io.cilium.fixed-identity": "kv-store" 
  cilium-etcd-client-svc.yaml: |-
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: etcd
        etcd_cluster: cilium-etcd
      name: cilium-etcd-client
      namespace: kube-system
    spec:
      ports:
      - name: client
        port: 2379
        protocol: TCP
        targetPort: 2379
      selector:
        app: etcd
        etcd_cluster: cilium-etcd
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  cilium-etcd-svc.yaml: |-
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      labels:
        app: etcd
        etcd_cluster: cilium-etcd
      name: cilium-etcd
      namespace: kube-system
    spec:
      clusterIP: None
      ports:
      - name: client
        port: 2379
        protocol: TCP
        targetPort: 2379
      - name: peer
        port: 2380
        protocol: TCP
        targetPort: 2380
      selector:
        app: etcd
        etcd_cluster: cilium-etcd
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
